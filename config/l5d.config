admin:
  port: 9990
namers:
- kind: io.l5d.k8s
  prefix: /io.l5d.k8s.grpc
  transformers:
  - kind: io.l5d.k8s.daemonset
    namespace: myproject
    port: grpc-incoming
    service: l5d
    # hostNetwork: true # Uncomment if using host networking (eg for CNI)
- kind: io.l5d.rewrite
  prefix: /portNsSvcToK8s
  pattern: "/{port}/{ns}/{svc}"
  name: "/k8s/{ns}/{port}/{svc}"
routers:
- label: gprc-incoming
  protocol: h2
  experimental: true
  servers:
  - port: 4341
    ip: 0.0.0.0
  identifier:
    kind: io.l5d.header.path
    segments: 1
  interpreter:
    kind: default
    transformers:
    - kind: io.l5d.k8s.localnode
      # hostNetwork: true # Uncomment if using host networking (eg for CNI)
  dtab: |
    /srv => /#/io.l5d.k8s/default/grpc ;             # /srv/service/package -> /#/io.l5d.k8s/default/grpc/service/package
    /svc => /$/io.buoyant.http.domainToPathPfx/srv ; # /svc/package.service -> /srv/service/package

# HTTP/2 Ingress Controller listening on port 8080
- protocol: h2
  experimental: true
  label: h2-ingress
  servers:
    - port: 8080
      ip: 0.0.0.0
      clearContext: true
  identifier:
    kind: io.l5d.ingress
  dtab: /svc => /#/io.l5d.k8s